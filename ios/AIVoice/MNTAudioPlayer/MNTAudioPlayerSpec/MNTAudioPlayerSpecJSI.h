/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook {
namespace react {


  class JSI_EXPORT NativeAudioPlayerCxxSpecJSI : public TurboModule {
protected:
  NativeAudioPlayerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Object getCurrentState(jsi::Runtime &rt) = 0;
  virtual jsi::Object pausePlaying(jsi::Runtime &rt) = 0;
  virtual bool rewindPlayingToTime(jsi::Runtime &rt, double time) = 0;
  virtual bool setToPlayFile(jsi::Runtime &rt, jsi::Object fileInfo) = 0;
  virtual bool startPlayingFromTime(jsi::Runtime &rt, double time) = 0;
  virtual bool stopPlaying(jsi::Runtime &rt) = 0;
  virtual void addListener(jsi::Runtime &rt, jsi::String eventName) = 0;
  virtual void removeListeners(jsi::Runtime &rt, double count) = 0;
};

template <typename T>
class JSI_EXPORT NativeAudioPlayerCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "MNTAudioPlayerManager";

protected:
  NativeAudioPlayerCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeAudioPlayerCxxSpec::kModuleName}, jsInvoker),
      delegate_(static_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeAudioPlayerCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeAudioPlayerCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    jsi::Object getCurrentState(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getCurrentState) == 1,
          "Expected getCurrentState(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::getCurrentState, jsInvoker_, instance_);
    }
    jsi::Object pausePlaying(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::pausePlaying) == 1,
          "Expected pausePlaying(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::pausePlaying, jsInvoker_, instance_);
    }
    bool rewindPlayingToTime(jsi::Runtime &rt, double time) override {
      static_assert(
          bridging::getParameterCount(&T::rewindPlayingToTime) == 2,
          "Expected rewindPlayingToTime(...) to have 2 parameters");

      return bridging::callFromJs<bool>(
          rt, &T::rewindPlayingToTime, jsInvoker_, instance_, std::move(time));
    }
    bool setToPlayFile(jsi::Runtime &rt, jsi::Object fileInfo) override {
      static_assert(
          bridging::getParameterCount(&T::setToPlayFile) == 2,
          "Expected setToPlayFile(...) to have 2 parameters");

      return bridging::callFromJs<bool>(
          rt, &T::setToPlayFile, jsInvoker_, instance_, std::move(fileInfo));
    }
    bool startPlayingFromTime(jsi::Runtime &rt, double time) override {
      static_assert(
          bridging::getParameterCount(&T::startPlayingFromTime) == 2,
          "Expected startPlayingFromTime(...) to have 2 parameters");

      return bridging::callFromJs<bool>(
          rt, &T::startPlayingFromTime, jsInvoker_, instance_, std::move(time));
    }
    bool stopPlaying(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::stopPlaying) == 1,
          "Expected stopPlaying(...) to have 1 parameters");

      return bridging::callFromJs<bool>(
          rt, &T::stopPlaying, jsInvoker_, instance_);
    }
    void addListener(jsi::Runtime &rt, jsi::String eventName) override {
      static_assert(
          bridging::getParameterCount(&T::addListener) == 2,
          "Expected addListener(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::addListener, jsInvoker_, instance_, std::move(eventName));
    }
    void removeListeners(jsi::Runtime &rt, double count) override {
      static_assert(
          bridging::getParameterCount(&T::removeListeners) == 2,
          "Expected removeListeners(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::removeListeners, jsInvoker_, instance_, std::move(count));
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace react
} // namespace facebook
